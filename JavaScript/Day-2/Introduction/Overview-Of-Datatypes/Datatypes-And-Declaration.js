/*

Datatpes are of two types.
1. Primive datatypes.
        Primitive datatypes are immutabe. Which means we cannot change their values based on 
    Numbers: Int, float.
    Strings: Any data in single quote, double quotes or backticks.
    Booleans: True, false.
    undefined: a defined variable without initialization or value.
    Null: empty value or no value.
    Symbol: a unique value that can be generated by symbols constructor.


2. Non- Primitive Datatypes:
    Arrays 
    Objects
*/


//--------------------------- Lets Talk about Primitive datatpes.
//----------------------------Numbers-------------

let numOne = 10;
a = typeof(numOne)
console.log(a)

const numTwo = 20.14;
b = typeof(numTwo)
console.log(b) // float type number.


// -------------Its immutable: we cannot modify the value of numOne again eg.
//--------------Numbers are compared. eg

temp = numOne == numTwo
console.log(temp)




//-----------------------------Strings

let stOne = "Hello";
let stTwo = 'Pakistans';

console.log(typeof(stOne))

//String are immutable eg we cannot modify its value jas will through error eg
// trying to change l on 3 index of string
stOne[0] = "b"
console.log(stOne)// value remains Hello

// the expression does not change the value of the stOne(hello).

// lets compare the two strings

tempStr = stOne == stTwo
console.log(tempStr)







//--------------------------Booleans

let bulbOn = true;
console.log("Type = ",typeof(bulbOn),"\nValue = ",bulbOn)
bulbOff = false;

console.log(bulbOn == bulbOff)
temp = bulbOn = bulbOff
console.log(temp)


//--------------------------Null

let emptyVar = null;
let noValue = 0;
console.log("This is = ",typeof(emptyVar),". Null is object type.","\nThis is not null = ",typeof(noValue))

console.log(emptyVar == noValue)

console.log(emptyVar = noValue)




//-----------------------undefined
// a variable with no value is undefined.

let undefVar;
console.log("undefVar is of ",undefVar,"type.")

console.log(undefVar == emptyVar)

console.log(undefVar = emptyVar)

//------------------------symbol
// We will talk about it later..............................



//_________________________________________________________________________________________________
//------------------------------------2.-Non-Primitive type.

//---------Arrays.

let numArray = [
    1,              // at 0 index
    2,              // at 1 index
    3,              // at 2 index
];

console.log(numArray)

// Arrays is non primitive hence modifiable eg.

numArray[0] = 10
console.log(numArray)
// donot compare non primitve types like objects, arrays, functions. 
//as they are compared by reference not compared by value.
//So we can compare them by reference not value eg.

let numArray2 = [
    10,
    2,
    3,
]

console.log(numArray == numArray2) //As compared by value even if the values are same it will be false

let numArray3 = numArray

console.log(numArray3 == numArray)// now it is true bcz it is compared by repference



console.log(numArray[0] == numArray2[0])// same goes for arrays







// ----------Objects

let infoObj1 = {
    firstName : 'Khuram',
    age : 20,
    job : " Student "
};

console.log(infoObj1.firstName)

// same goes for objects in terms of camparison

let infoObj2 = {
    firstName : 'Khuram',
    age : 20,
    job : " Student "
};

console.log(infoObj1 == infoObj2)

let infoObj3 = infoObj2;

console.log(infoObj3 == infoObj2)

console.log(infoObj1.firstName == infoObj2.firstName)// now we are checking by reference then it is true.